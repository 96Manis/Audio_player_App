{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\project1\\\\Audio_player_App\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport FileUpload from './components/FileUpoload.jsx';\nimport Playlist from './components/Playlist.jsx';\nimport NowPlaying from './components/NowPlaying.jsx';\nimport AudioPlayer from './components/AudioPlayer.jsx';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [currentFileIndex, setCurrentFileIndex] = useState(0);\n  const handleFileChange = file => {\n    setFiles([...files, file]);\n  };\n  const handlePlay = index => {\n    setCurrentFileIndex(index);\n  };\n  const handleEnded = () => {\n    setCurrentFileIndex(prevIndex => prevIndex + 1);\n  };\n  useEffect(() => {\n    // Save currentFileIndex to localStorage or other storage mechanism\n    // Load last playing audio file and currentFileIndex on page reload\n    // Implement your own logic for storing and retrieving this information\n  }, [currentFileIndex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FileUpload, {\n      onFileChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n      files: files,\n      onPlay: handlePlay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(NowPlaying, {\n      currentFile: files[currentFileIndex]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(AudioPlayer, {\n      currentFile: files[currentFileIndex],\n      onEnded: handleEnded\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"N+Gg/sQHLVqg/lg5CRc6cJH4Hvc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FileUpload","Playlist","NowPlaying","AudioPlayer","jsxDEV","_jsxDEV","App","_s","files","setFiles","currentFileIndex","setCurrentFileIndex","handleFileChange","file","handlePlay","index","handleEnded","prevIndex","children","onFileChange","fileName","_jsxFileName","lineNumber","columnNumber","onPlay","currentFile","onEnded","_c","$RefreshReg$"],"sources":["C:/dev/project1/Audio_player_App/src/App.js"],"sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport FileUpload from './components/FileUpoload.jsx';\nimport Playlist from './components/Playlist.jsx';\nimport NowPlaying from './components/NowPlaying.jsx';\nimport AudioPlayer from './components/AudioPlayer.jsx';\nimport './App.css';\n\nconst App = () => {\n  const [files, setFiles] = useState([]);\n  const [currentFileIndex, setCurrentFileIndex] = useState(0);\n\n  const handleFileChange = (file) => {\n    setFiles([...files, file]);\n  };\n\n  const handlePlay = (index) => {\n    setCurrentFileIndex(index);\n  };\n\n  const handleEnded = () => {\n    setCurrentFileIndex((prevIndex) => prevIndex + 1);\n  };\n\n  useEffect(() => {\n    // Save currentFileIndex to localStorage or other storage mechanism\n    // Load last playing audio file and currentFileIndex on page reload\n    // Implement your own logic for storing and retrieving this information\n  }, [currentFileIndex]);\n\n  return (\n    <div>\n    <FileUpload onFileChange={handleFileChange} />\n    <Playlist files={files} onPlay={handlePlay} />\n    <NowPlaying currentFile={files[currentFileIndex]} />\n    <AudioPlayer\n      currentFile={files[currentFileIndex]}\n      onEnded={handleEnded}\n    />\n  </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,8BAA8B;AACrD,OAAOC,QAAQ,MAAM,2BAA2B;AAChD,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAE3D,MAAMc,gBAAgB,GAAIC,IAAI,IAAK;IACjCJ,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEK,IAAI,CAAC,CAAC;EAC5B,CAAC;EAED,MAAMC,UAAU,GAAIC,KAAK,IAAK;IAC5BJ,mBAAmB,CAACI,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBL,mBAAmB,CAAEM,SAAS,IAAKA,SAAS,GAAG,CAAC,CAAC;EACnD,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd;IACA;IACA;EAAA,CACD,EAAE,CAACW,gBAAgB,CAAC,CAAC;EAEtB,oBACEL,OAAA;IAAAa,QAAA,gBACAb,OAAA,CAACL,UAAU;MAACmB,YAAY,EAAEP;IAAiB;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9ClB,OAAA,CAACJ,QAAQ;MAACO,KAAK,EAAEA,KAAM;MAACgB,MAAM,EAAEV;IAAW;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9ClB,OAAA,CAACH,UAAU;MAACuB,WAAW,EAAEjB,KAAK,CAACE,gBAAgB;IAAE;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACpDlB,OAAA,CAACF,WAAW;MACVsB,WAAW,EAAEjB,KAAK,CAACE,gBAAgB,CAAE;MACrCgB,OAAO,EAAEV;IAAY;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAER,CAAC;AAAChB,EAAA,CAjCID,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AAmCT,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}